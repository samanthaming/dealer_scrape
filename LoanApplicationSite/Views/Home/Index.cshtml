@using DemoWebApp.Tests
@using Newtonsoft.Json

@{
    ViewBag.Title = "Home Page";
    bool secondFileIsExistAndNotEmpty = false;


    // Set up Path names to get files
    string region = "BC";
    string basePath = @"C:\Users\Public\Happy";
    string combinedDirectory = Path.Combine(basePath, region);

    // Get all Files
    DirectoryInfo directory = new DirectoryInfo(combinedDirectory);
    FileInfo[] files = directory.GetFiles().OrderByDescending(f => f.CreationTime).ToArray();

    // Read Each file and Parse them

    // Get First Recent File
    string firstRecentFile = File.ReadAllText(files[0].FullName);
    Dictionary<string, List<Plan>> firstRecentPlans = JsonConvert.DeserializeObject<Dictionary<string, List<Plan>>>(firstRecentFile);

    // Get Second Most Recent File
    string secondRecentFile = File.ReadAllText(files[1].FullName);
    Dictionary<string, List<Plan>> secondRecentPlans = JsonConvert.DeserializeObject<Dictionary<string, List<Plan>>>(secondRecentFile);

    if (files.Length > 1)
    {
        // Need to also check that Values are not empty, which can happen if scrape test fails
        if (secondRecentPlans.Values.FirstOrDefault().Count > 0)
        {
            secondFileIsExistAndNotEmpty = true;
        }
    }

    // Set up Tabs and Callings name

    Dictionary<string, string> tabs = new Dictionary<string, string>()
    {
        {"tab1", "Hottest devices for less"},
        {"tab2", "Low device cost"},
        {"tab3", "More upfront, less per month"},
        {"tab4", "Pay full device cost"},
        {"tab5", "Bring Your Own Device"},
    };

    Dictionary<string, string> callings = new Dictionary<string, string>()
    {
        {"canada", "Canada-Wide Calling"},
        {"local", "Local Calling" }
    };

}

<div class="row">
    <h1>Roger Plans</h1>
    @if (secondFileIsExistAndNotEmpty)
    {

        foreach (var province in firstRecentPlans)
        {
            var previousPlans = secondRecentPlans[province.Key];

            <h2>@province.Key</h2>

            // Loop through Tabs
            foreach (var tab in tabs)
            {
                var tabPlans = province.Value.Any(p => p.Tab == tab.Key);

                if (tabPlans)
                {
                    <h3>@tab.Value</h3>

                    // Loop through Callings
                    foreach (var calling in callings)
                    {
                        var callingPlans = province.Value.Where(p => p.Tab == tab.Key && p.Calling == calling.Key);
                        if (callingPlans.Any())
                        {
                            <h4>@calling.Value</h4>

                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Id</th>                                       
                                        <th>Name</th>
                                        <th>Data</th>                                        
                                        <th>Term</th>
                                        <th>Tab</th>
                                        <th>Calling</th>

                                        <th>Date</th>
                                        <th>Yesterday Price</th>
                                        
                                        <th>Date</th>
                                        <th>Today Price</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var plan in callingPlans)
                                    {
                                        var previousPlan = previousPlans.FirstOrDefault(p => p.Id == plan.Id);

                                        if (previousPlan != null)
                                        {
                                            previousPlan.IsProcessed = true;
                                            <tr @if (previousPlan.Price != plan.Price) { <text> style="background-color:lightcoral" </text> }>
                                                <td>@plan.Id</td>
                                                <td>@plan.Name</td>
                                                <td>@plan.Data</td>                                               
                                                <td>@plan.Term</td>
                                                <td>@plan.Tab</td>
                                                <td>@plan.Calling</td>
                                                
                                                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                                                <td>@previousPlan.Price</td>

                                                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                                                <td>@plan.Price</td>
                                            </tr>
                                        }
                                        else
                                        {
                                            // Mark New Plans
                                            plan.IsNew = true;
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                    }
                }
            }

        }
    }

    @*@Html.Partial("_TablePlans", firstRecentPlans);*@
</div>

<div class="row">
    <h1 style="color: royalblue;">Changed Plans</h1>
    
        @foreach (var province in firstRecentPlans)
        {
            var previousPlans = secondRecentPlans[province.Key];
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Id</th>                                       
                        <th>Name</th>
                        <th>Data</th>                                        
                        <th>Term</th>
                        <th>Tab</th>
                        <th>Calling</th>

                        <th>Date</th>
                        <th>Yesterday Price</th>
                                        
                        <th>Date</th>
                        <th>Today Price</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var plan in province.Value)
                {
                    var previousPlan = previousPlans.FirstOrDefault(p => p.Id == plan.Id);
                    if (previousPlan != null)
                    {                       
                        if (previousPlan.Price != plan.Price)
                        {
                            <tr>
                                <td>@plan.Id</td>
                                <td>@plan.Name</td>
                                <td>@plan.Data</td>
                                <td>@plan.Term</td>
                                <td>@plan.Tab</td>
                                <td>@plan.Calling</td>

                                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                                <td>@previousPlan.Price</td>

                                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                                <td>@plan.Price</td>
                            </tr>
                        }
                    }
                }
                </tbody>
            </table>
        }
</div>

<div class="row">
    <h1 style="color: green;" >New Plans Added</h1>
    
    @foreach (var province in firstRecentPlans)
    {
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>                                       
                <th>Name</th>
                <th>Data</th>                                        
                <th>Term</th>
                <th>Tab</th>
                <th>Calling</th>
                <th>Date</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var plan in province.Value.Where(p => p.IsNew))
        {
            <tr>
                <td>@plan.Id</td>
                <td>@plan.Name</td>
                <td>@plan.Data</td>
                <td>@plan.Term</td>
                <td>@plan.Tab</td>
                <td>@plan.Calling</td>
                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                <td>@plan.Price</td>
            </tr>
        }
        </tbody>
    </table>
    }
</div>

<div class="row">
    <h1 style="color:red">Discontinued Plans</h1>
    @foreach (var province in secondRecentPlans)
    {
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>                                       
                <th>Name</th>
                <th>Data</th>                                        
                <th>Term</th>
                <th>Tab</th>
                <th>Calling</th>
                <th>Date</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var plan in province.Value.Where(p => !p.IsProcessed))
        {
            <tr>
                <td>@plan.Id</td>
                <td>@plan.Name</td>
                <td>@plan.Data</td>
                <td>@plan.Term</td>
                <td>@plan.Tab</td>
                <td>@plan.Calling</td>
                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                <td>@plan.Price</td>
            </tr>
        }
        </tbody>
    </table>
    }
</div>
