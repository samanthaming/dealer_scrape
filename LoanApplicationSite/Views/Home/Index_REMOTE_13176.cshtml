@using DemoWebApp.Tests
@using Newtonsoft.Json

@{
    ViewBag.Title = "Home Page";
    bool secondFileIsExistAndNotEmpty = false;
    var testing = false;
    List<Plan> secondRecentPlans = new List<Plan>();

    // Set up Path names to get files
    string region = "YT";
    string basePath = @"C:\Users\Public\Rogers";
    string combinedDirectory = Path.Combine(basePath, region);

    // Get all Files
    DirectoryInfo directory = new DirectoryInfo(combinedDirectory);
    FileInfo[] files = directory.GetFiles().OrderByDescending(f => f.CreationTime).ToArray();

    // Read Each file and Parse them

    // Get First Recent File
    string firstRecentFile = File.ReadAllText(files[0].FullName);
    List<Plan> firstRecentPlans = JsonConvert.DeserializeObject<List<Plan>>(firstRecentFile);

    // Get Second Most Recent File
    if (files.Length > 1)
    {
        string secondRecentFile = File.ReadAllText(files[1].FullName);
        secondRecentPlans = JsonConvert.DeserializeObject<List<Plan>>(secondRecentFile);

        // [TO DO] Implement something if scrape test fails. Need to know what that looks like first?
        //if (secondRecentPlans.Values.FirstOrDefault().Count > 0)
        //{
        //    secondFileIsExistAndNotEmpty = true;
        //}
    }

    // Set up Tabs and Callings name

    Dictionary<string, string> tabs = new Dictionary<string, string>()
    {
        {"tab1", "Hottest devices for less"},
        {"tab2", "Low device cost"},
        {"tab3", "More upfront, less per month"},
        {"tab4", "Pay full device cost"},
        {"tab5", "Bring Your Own Device"},
    };

    Dictionary<string, string> callings = new Dictionary<string, string>()
    {
        {"canada", "Canada-Wide Calling"},
        {"local", "Local Calling" }
    };

}


<div class="row">
@foreach (var tab in tabs)
{
    <h3>@tab.Value</h3>

    foreach (var calling in callings)
    {
        <h4>@calling.Value</h4>

        // Most Recent Plan
        var firstPlans = firstRecentPlans.Where(p => p.Tab == tab.Key && p.Calling == calling.Key);

        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Data</th>
                    <th>Term</th>
                    <th>Tab</th>
                    <th>Calling</th>

                    <th>Date</th>
                    <th>Previous Price</th>

                    <th>Date</th>
                    <th>Today Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var plan in firstPlans)
                {
                    // Get the Second Most Recent Plan that matches the id
                    var secondPlan = secondRecentPlans.FirstOrDefault(p => p.Id == plan.Id);

                    if (secondPlan != null)
                    {
                        secondPlan.IsProcessed = true;
                        <tr @if (secondPlan.Price != plan.Price)
                            {
                                <text> style="background-color: lightcoral" </text>
                            }>
                            <td>@plan.Id</td>
                            <td>@plan.Name</td>
                            <td>@plan.Data</td>
                            <td>@plan.Term</td>
                            <td>@plan.Tab</td>
                            <td>@plan.Calling</td>

                            <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                            <td>@secondPlan.Price</td>

                            <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                            <td>@plan.Price</td>
                        </tr>
                    }
                    else
                    {
                        // Mark New Plans
                        plan.IsNew = true;
                    }
                }
            </tbody>
        </table>
    }
}
</div>

<div class="row">
    <h1 style="color: royalblue;" >Changed Plans</h1>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Data</th>
                <th>Term</th>
                <th>Tab</th>
                <th>Calling</th>

                <th>Date</th>
                <th>Previous Price</th>

                <th>Date</th>
                <th>Today Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var plan in firstRecentPlans)
            {
                // Get the Second Most Recent Plan that matches the id
                var secondPlan = secondRecentPlans.FirstOrDefault(p => p.Id == plan.Id && p.Price != plan.Price);

                if (secondPlan != null)
                {
                    <tr>
                        <td>@plan.Id</td>
                        <td>@plan.Name</td>
                        <td>@plan.Data</td>
                        <td>@plan.Term</td>
                        <td>@plan.Tab</td>
                        <td>@plan.Calling</td>

                        <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                        <td>@secondPlan.Price</td>

                        <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                        <td>@plan.Price</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="row">
    <h1 style="color: green;" >New Plans Added</h1>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Data</th>
                <th>Term</th>
                <th>Tab</th>
                <th>Calling</th>
                <th>Date</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var plan in firstRecentPlans.Where(p => p.IsNew))
        {
            <tr>
                <td>@plan.Id</td>
                <td>@plan.Name</td>
                <td>@plan.Data</td>
                <td>@plan.Term</td>
                <td>@plan.Tab</td>
                <td>@plan.Calling</td>
                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                <td>@plan.Price</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="row">
    <h1 style="color:red">Discontinued Plans</h1>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Data</th>
                <th>Term</th>
                <th>Tab</th>
                <th>Calling</th>
                <th>Date</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var plan in secondRecentPlans.Where(p => !p.IsProcessed))
        {
            <tr>
                <td>@plan.Id</td>
                <td>@plan.Name</td>
                <td>@plan.Data</td>
                <td>@plan.Term</td>
                <td>@plan.Tab</td>
                <td>@plan.Calling</td>
                <td>@plan.CreatedAt.ToString("MMM dd yyyy hh:mmtt")</td>
                <td>@plan.Price</td>
            </tr>
        }
        </tbody>
    </table>
</div>
